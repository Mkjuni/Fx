package com.example.volatilityindicestradingbot;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import com.google.gson.Gson;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.IOException;

public class MainActivity extends AppCompatActivity {

    private static final String API_URL = "https://api.deriv.com/v1.0/orders"; // Replace with actual API endpoint
    private static final String INSTRUMENT = "VIX_75"; // Volatility 75 Index (VIX 75)
    private static final String UNIT_SIZE = "1000"; // Order size per trade

    private Button startBotButton;
    private Button stopBotButton;
    private TextView logsTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        startBotButton = findViewById(R.id.startBotButton);
        stopBotButton = findViewById(R.id.stopBotButton);
        logsTextView = findViewById(R.id.logsTextView);

        startBotButton.setOnClickListener(v -> startTrading());
        stopBotButton.setOnClickListener(v -> stopTrading());
    }

    private void startTrading() {
        startBotButton.setEnabled(false);
        stopBotButton.setEnabled(true);

        // Start the bot
        fetchMarketData();
    }

    private void stopTrading() {
        startBotButton.setEnabled(true);
        stopBotButton.setEnabled(false);

        // Logic to stop the trading
        Toast.makeText(this, "Bot stopped", Toast.LENGTH_SHORT).show();
    }

    private void fetchMarketData() {
        // API endpoint to fetch market data (use Deriv's actual API)
        String url = "https://api.deriv.com/v1.0/market_data"; // Example endpoint, replace with actual one

        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder()
                .url(url)
                .header("Authorization", "Bearer " + getString(R.string.api_key))
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                runOnUiThread(() -> Toast.makeText(MainActivity.this, "Error: " + e.getMessage(), Toast.LENGTH_SHORT).show());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (!response.isSuccessful()) {
                    runOnUiThread(() -> Toast.makeText(MainActivity.this, "Error fetching data", Toast.LENGTH_SHORT).show());
                    return;
                }

                // Parse the response
                String jsonResponse = response.body().string();
                Gson gson = new Gson();
                MarketData marketData = gson.fromJson(jsonResponse, MarketData.class);

                if (marketData != null && marketData.getPrices() != null && !marketData.getPrices().isEmpty()) {
                    double currentPrice = marketData.getPrices().get(0).getCloseoutAsk();

                    // Example logic for placing buy/sell based on volatility
                    if (currentPrice > 1000) { // Threshold for volatility (adjust based on real conditions)
                        placeTrade("SELL");
                    } else {
                        placeTrade("BUY");
                    }
                }
            }
        });
    }

    private void placeTrade(String orderType) {
        String url = String.format(API_URL, getString(R.string.account_id));

        String orderData = "{\"order\": {\"units\": " + UNIT_SIZE + ", \"instrument\": \"" + INSTRUMENT + "\", \"timeInForce\": \"FOK\", \"type\": \"MARKET\", \"side\": \"" + orderType + "\"}}";

        OkHttpClient client = new OkHttpClient();
        okhttp3.RequestBody body = okhttp3.RequestBody.create(orderData, okhttp3.MediaType.parse("application/json"));
        Request request = new Request.Builder()
                .url(url)
                .post(body)
                .header("Authorization", "Bearer " + getString(R.string.api_key))
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
